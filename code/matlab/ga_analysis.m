%% STDP Curve Fitting via Genetic Algorithm
function [params r seed]  = ga_analysis(numpars, index, expname, seed)

dirname = ['data-' date];
[s m m] = mkdir(dirname);

% rand('seed',sum(100*clock))
% seed = ceil(rand*10000);
rng(seed);

%% Importing Experimental Variables
gadata = exp_data(numpars,index,expname);

%% init Population
[InitialPopulation reqpop created] = popinit(gadata.num_pop,gadata.num_var);

if created == 0 
  gadata.gadata.num_pop = reqpop;
  [InitialPopulation reqpop created] = popinit(gadata.num_pop,gadata.num_var);
end

%% Create GA option structure
%% 
rtdp_options = gaoptimset( ...
    'InitialPop', InitialPopulation, ... 
    'PopulationSize',gadata.num_pop,...
    'Generations',gadata.num_gen,...
    'StallGenLimit',gadata.num_gen,...
    'CrossoverFraction',gadata.crossover,...               
    'CreationFcn',@gacreationlinearfeasible,...
    'FitnessScalingFcn',{@fitscalingtop,1},...
    'SelectionFcn',@selectionuniform,...
    'MutationFcn',{@mutationadaptfeasible},...
    'UseParallel','always',...
    'InitialPenalty',gadata.penalty,...
    'PenaltyFactor',gadata.penalty ); 

%% Start GA 
[x,fval,exitflag,output,population,scores] = ... 
    ga( ...
    {@fitting,gadata}, ...
    gadata.num_var, ...
    [],[],[],[], ...
    zeros(1,gadata.num_var), ...
    ones(1,gadata.num_var), ...
    [], ...
    rtdp_options);

r      = fval;
params = [0 x];
gap    = gadata.scale_gap(gadata.pidx+1);
b      = gadata.scale_b(gadata.pidx+1);

params = gap.*params(gadata.pidx+1) + b;

filename=[dirname '/data-' gadata.exp_name '-' num2str(numpars) '-' num2str(index) '-' num2str(seed)]
file=fopen(filename,'a');
fprintf(file,'%d %f ', seed, r );
for t=1:length(params); fprintf(file,'%f ', params(t) ); end;
fprintf(file,'\n');
fclose(file);


